import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.10'
    //id("org.jetbrains.kotlin.plugin.allopen") version "1.7.22"
    id "org.jetbrains.kotlin.kapt" version "1.8.10"
    id("com.google.protobuf") version "0.9.4"
}

//allOpen {
//    annotation("org.mapstruct.Mapper")
//}

group = 'org.khw'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
        //exclude group: "org.slf4j", module: "slf4j-simple"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.8.10'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.0.4'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.mapstruct:mapstruct:1.5.3.Final'

    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"

    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.2'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.1'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'

    // protobuf
    implementation "com.google.protobuf:protobuf-java-util:3.25.1"
    implementation 'com.google.protobuf:protobuf-java:3.25.1'
    implementation group: 'net.devh', name: 'grpc-server-spring-boot-starter', version: '3.0.0.RELEASE'
    runtimeOnly "io.grpc:grpc-netty-shaded:1.58.1"
    implementation "io.grpc:grpc-protobuf:1.58.1"
    implementation "io.grpc:grpc-stub:1.58.1"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

    // Rabbot MQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    // Kafka
    implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: '3.0.12'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.6.0'


    implementation 'io.github.microutils:kotlin-logging:3.0.5'

    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.15.3'

    testImplementation 'org.mockito:mockito-inline:4.8.1'

    kapt("org.mapstruct:mapstruct-processor:1.5.3.Final")
    kapt("com.querydsl:querydsl-apt:5.0.0:jakarta")
    kapt("jakarta.persistence:jakarta.persistence-api")
    kapt("jakarta.annotation:jakarta.annotation-api")
    kaptTest("org.mapstruct:mapstruct-processor:1.5.3.Final")
}

protobuf {
    protoc { // protocol buffer를 컴파일하는 protoc의 라이브러리를 지정
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.58.1"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc{}
        }
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


